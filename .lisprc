(define `` (lambda (f)
    (cond
        (atom? f) (list 'quote f)
        (= '~ (car f)) (car (cdr f))
        (cons
            'list
            (map `` f)))))
(defmacro ` (f) (`` f))

(defmacro defun (f args body) (` (define (~ f) (lambda (~ args) (~ body)))))
(defmacro if (p x y) (` (cond (~ p) (~ x) (~ y))))

(defun evens (x)
    (cond
        (nil? x) '()
        (cons
            (car x)
            (odds (cdr x)))))
(defun odds (x)
    (cond
        (nil? x) '()
        (evens (cdr x))))
(defmacro let (exps body)
    (cons
        (` (lambda
            (~ (evens exps))
            (~ body)))
        (odds exps)))

(defmacro defun-trace (f args body)
    (` (define
        (~ f)
        (lambda
            (~ args)
            (let
                (res (~ body))
                (progn
                    (echo '(~ f) (~ (car args)) res)
                    res))))))



(defun dec (n) (- n 1))

(defun-trace fact (n)
    (cond
        (= n 1) 1
        (* n (fact (dec n)))))
(defun-trace fib (n)
    (cond
        (< n 2) n
        (+
            (fib (- n 1))
            (fib (- n 2)))))

(defun fact1 (n)
    (cond
        (= n 1) 1
        (*
            n
            (fact1 (dec n)))))