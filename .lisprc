(defmacro if (p x y) (list 'cond p x y))
(defmacro defun (f args body) (list 'define f (list 'lambda args body)))
(defun evens (x) (cond (nil? x) '() (cons (car x) (odds (cdr x)))))
(defun odds (x) (cond (nil? x) '() (evens (cdr x))))
(defmacro let (exps body) (cons (list 'lambda (evens exps) body) (odds exps)))
(defmacro defun-trace (f args body) (list 'define f (list 'lambda args (list 'let (list 'res body) (list 'progn (list 'echo (list 'quote f) (car args) 'res) 'res)))))
(defun-trace fact (n) (cond (= n 1) 1 (* n (fact (- n 1)))))
(defun-trace fib (n) (cond (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))