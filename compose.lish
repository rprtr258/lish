; ============ MACRO SECTION ============

(setmacro defun (fn (f args body) `(set ,f (fn ,args ,body))))

(setmacro defmacro (fn (m args body)
    `(setmacro ,m
        (fn ,args ,body))))

(defmacro compose (& fs)
  (let
    (compose* (fn (fs)
      (if
        (empty? fs)
        `x
        (let
          (cur-fun (first fs)
          rest-funs (rest fs))
          `(,cur-fun ,(compose* rest-funs))))))
    `(fn (x) ,(compose* fs))))

(defmacro letfun (exps body)
  (let (bindings ((defun f (expss)
      (if
        (empty? expss)
        ()
        (let
          (fun-name (first expss)
          fun-args (cadr expss)
          fun-body (caddr expss)
          rest (cdddr expss))
          `(,fun-name (defun ,fun-name ,fun-args ,fun-body) ,@(f rest)))))
      exps))
  `(let ,bindings ,body)))

(defmacro defun-trace (f args body)
  `(defun ,f ,args
    (let
      (res ,body)
      (echo "(" ',f " " (join ,@args) ") = " res)
      res)))

; anaphoric fn, argument binds to %
(defmacro # (body) `(fn (%) ,body))

; rename to for
(defmacro doseq (seq-exprs body)
  ((defun doseq* (sxs body)
    (let
      (var-name (first sxs)
      var-seq (cadr sxs)
      the-body (if
        (empty? (cddr sxs))
        body
        (doseq* (cddr sxs) body)))
      `(map
        (fn (,var-name) ,the-body)
        ,var-seq)))
  seq-exprs body))

(defmacro cons-if (p x y s)
  `(cons (if ,p ,x ,y) s))

(defmacro -> (& x)
    (if
        (= (len x) 1)
        (first x)
        (let
            (fst (first x)
            next-f (cadr x)
            rest (cddr x)
            new-val (if
              (atom? next-f)
              `(,next-f ,fst)
              `(,(first next-f) ,fst ,@(rest next-f))))
            `(-> ,new-val ,@rest))))

(defmacro >-> (x)
    (if
        (= (len x) 1)
        (first x)
        (let
            (fst (first x)
            next-f (cadr x)
            rest (cddr x))
            (>->
                (cons-if
                    (atom? next-f)
                    `(,next-f ,fst)
                    `((fn (%%) ,next-f) ,fst))
                    rest))))

(defmacro juxt (& fs)
    `(fn (x)
        (map
            (fn (f) (f x))
            (list ,@fs))))

(defmacro cond (& pes)
  (if
    (= 1 (len pes))
    (first pes)
    (if
      (= 0 (len pes))
      ()
      `(if
        ,(first pes) ,(cadr pes)
        ,(apply cond (cddr pes))))))

; ============ FUNCTIONS SECTION ============

(set nth (fn (xs i) (if (= i 0) (first xs) (nth (rest xs) (- i 1)))))
(set cadr (fn (xs) (nth xs 1)))
(set caddr (fn (xs) (nth xs 2)))
(set cddr (compose rest rest))
(set cdddr (compose rest cddr))

(defun not (x) (if x false true))

(defun dec (n) (- n 1))
(defun inc (n) (+ n 1))

(defun-trace fact-t (n)
    (if
        (= n 1) 1
        (* n (fact-t (dec n)))))

(defun-trace fib (n)
    (if
        (< n 2)
        n
        (+
            (fib (- n 1))
            (fib (- n 2)))))

(defun fact (n)
    (if
        (= n 1)
        1
        (*
            n
            (fact (dec n)))))

(defmacro when (predicate value)
    `(if ,predicate ,value ,()))

(defun range (& args)
    (let
      (start (if (>= (len args) 2) (nth args 0) 0)
      end (cond
        (>= (len args) 2) (nth args 1)
        (>= (len args) 1) (nth args 0)
        1)
      step (if (>= (len args) 3) (nth args 2) 1))
      (when
        (or
          (and (>= end start) (< step 0))
          (and (<= end start) (> step 0)))
        (throw (join "Start " (join start) " is after end " (join end))))
      (when (= step 0) (throw "Step is zero"))
      (letfun
        (range* (n k d)
          (if
            (or (and (>= k n) (> step 0)) (and (<= k n) (< step 0)))
            ()
            (cons k (range* n (+ k d) d))))
        (range* end start step))))

(defun map (f xs)
    (if
      (empty? xs)
      ()
      (cons (f (first xs)) (map f (rest xs)))))

(defun map* (f xss)
    (if
        (apply or (map empty? xss)) '()
        (cons
            (apply f (map first xss))
            (map* f (map rest xss)))))

(defun *map (f xs)
    (if
        (empty? xs) '()
        (+
            (f (first xs))
            (*map f (rest xs)))))

(defun take (n x)
    (if
        (or (empty? x) (= n 0))
        '()
        (cons (first x) (take (dec n) (rest x)))))

(defun drop (n x)
    (if
        (or (empty? x) (= n 0))
        x
        (drop (dec n) (rest x))))

(defun id (x) x)
