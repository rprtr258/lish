#V2
(macroexpand (not (= 1 2)))
(set not (fn (x) (if x false true)))
(not (= 1 1))
(not (= 1 2))
(setmacro not (fn (x) (if x false true)))
(not (= 1 1))
(not (= 1 2))
(macroexpand (not (= 1 2)))
(set a '(1 2 3))
(first a)
(rest a)
(set (first a) 4)
(setmacro cond (fn (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (count xs) 1) (nth xs 1)) (cons 'cond (rest (rest xs)))))))
(cond true 1 false 2)
(setmacro cond (fn (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (count xs) 1) (nth xs 1)) (cons 'cond (rest (rest xs)))))))
(setmacro cond (fn (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (len xs) 1) (nth xs 1)) (cons 'cond (rest (rest xs)))))))
(len '())
(setmacro cond (fn (& xs) (if (> (len xs) 0) (list 'if (first xs) (head (rest xs)) (cons 'cond (rest (rest xs)))))))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (if (> (len xs) 0) `(if ,(first xs) ,(head (rest xs)) ,(`(cond ,(rest (rest xs))))))))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (if (> (len xs) 0) `(if ,(first xs) ,(head (rest xs)) ,(`(cond ,(rest (rest xs))))) 42)))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (> (len xs) 0))))
(setmacro cond (fn (& xs) (> (len xs) 0)))
(setmacro cond (fn (& xs) (> (len xs) 0)))))))))))))))))))))))))))))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (len xs))
(setmacro cond (fn (& xs) (len xs)))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (> (len xs) 0)))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (< (len xs) 0)))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (< (len xs) 0)))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (> (len xs) 0)))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (if (> (len xs) 0) `(if ,(first xs) ,(head (rest xs)) ,(`(cond ,(rest (rest xs))))))))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (if (> (len xs) 0) `(if ,(first xs) ,(first (rest xs)) ,(`(cond ,(rest (rest xs))))))))
(macroexpand (cond true 1 false 2))
(setmacro cond (fn (& xs) (if (> (len xs) 0) `(if ,(first xs) ,(first (rest xs)) (cond ,(rest (rest xs)))))))
(macroexpand (cond true 1 false 2))
(cond true 1 false 2)
(cond false 1 false 2)
(setmacro cond (fn (& xs) (if (> (len xs) 0) (list 'if (first xs) (head (rest xs)) (cons 'cond (rest (rest xs)))))))
(cond false 1 false 2)
(setmacro cond (fn (& xs) (if (> (len xs) 0) (list 'if (first xs) (first (rest xs)) (cons 'cond (rest (rest xs)))))))
(cond false 1 false 2)
(set c '(1 2 3))
(set map (fn (f) (fn (xs) (if (empty? xs) () (cons (f (head xs)) (map f (rest xs)))))))
(map (fn (x) (* x x)) c)
((map (fn (x) (* x x))) c)
(set map (fn (f xs) (if (empty? xs) () (cons (f (first xs)) (map f (rest xs))))))
(map (fn (x) (* x x)) c)
(slurp "incA.lish")
(read (slurp "incA.lish"))
(eval (read (slurp "incA.lish")))
(load-file "incA.lish")
(set (first xs) 1)
(set xs '(2 3 4))
(set (first xs) 1)
(first xs)
(load-file "compose.lish")
(set cddr (compose rest rest))
compose
(macroexpand (defmacro compose (& fs) (fs)))
(load-file "compose.lish")
(macroexpand (defmacro compose (& fs) (fs)))
(set xs '(2 3 4))
(cddr xs)
(cdddr xs)
(range 10)
(fact 5)
(fib 5)
(str 1)
(str 1 1)
(str 1 '(str 1))
(fib 5)
(compose rest rest)
(macroexpand (compose rest rest))
compose
(macroexpand (compose rest rest))
(macroexpand (compose rest))
((macroexpand (compose rest)) '(1))
(macroexpand (compose rest))
(macroexpand (compose rest rest))
(fib 5)
[1 2 3]
(set 1 2)
`,
`(,)
`(,())
`(unquote)
(+ 1 2)
(echo 123 "a")
(str 123 "a")
(prn 123 "a")
(exit)
